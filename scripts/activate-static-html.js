// Script d'activation de l'architecture HTML statique
// Migre tous les SmartLinks existants vers des fichiers HTML statiques

require('dotenv').config({ path: '../.env' });
const mongoose = require('mongoose');
const StaticHtmlGenerator = require('../services/staticHtmlGenerator');

async function activateStaticHtmlArchitecture() {
  console.log('üöÄ ACTIVATION ARCHITECTURE HTML STATIQUE SMARTLINKS MDMC\n');
  
  try {
    // Connexion √† MongoDB
    console.log('1. Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ MongoDB connect√©');

    // Instance du g√©n√©rateur HTML
    const htmlGenerator = new StaticHtmlGenerator();

    // Recherche de tous les SmartLinks existants
    console.log('\n2. Recherche des SmartLinks existants...');
    
    // Essayer avec le mod√®le SmartLinkHTML d'abord
    let SmartLinkModel;
    let smartlinks = [];
    
    try {
      SmartLinkModel = require('../models/SmartLinkHTML');
      smartlinks = await SmartLinkModel.find({ isPublished: true });
      console.log(`‚úÖ Trouv√© ${smartlinks.length} SmartLinks (mod√®le SmartLinkHTML)`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Mod√®le SmartLinkHTML non trouv√©, tentative avec SmartLink...');
      
      try {
        SmartLinkModel = require('../models/SmartLink');
        smartlinks = await SmartLinkModel.find({ isPublished: true }).populate('artistId');
        console.log(`‚úÖ Trouv√© ${smartlinks.length} SmartLinks (mod√®le SmartLink)`);
      } catch (error2) {
        console.error('‚ùå Aucun mod√®le SmartLink trouv√©:', error2.message);
        return;
      }
    }

    if (smartlinks.length === 0) {
      console.log('‚ö†Ô∏è  Aucun SmartLink √† migrer');
      return;
    }

    // Transformation des donn√©es selon le mod√®le
    console.log('\n3. Transformation des donn√©es...');
    const smartlinksData = smartlinks.map(smartlink => {
      // V√©rifier le format du SmartLink
      if (smartlink.artist && smartlink.title) {
        // Format SmartLinkHTML
        return formatSmartLinkHTML(smartlink);
      } else if (smartlink.trackTitle && smartlink.artistId) {
        // Format SmartLink avec population
        return formatSmartLinkPopulated(smartlink);
      } else {
        console.warn(`‚ö†Ô∏è  SmartLink avec format non reconnu:`, smartlink._id);
        return null;
      }
    }).filter(Boolean);

    console.log(`‚úÖ ${smartlinksData.length} SmartLinks format√©s pour g√©n√©ration`);

    // G√©n√©ration de tous les fichiers HTML
    console.log('\n4. G√©n√©ration des fichiers HTML statiques...');
    const results = await htmlGenerator.regenerateAllSmartLinks(smartlinksData);

    // R√©sultats
    console.log('\nüìä R√âSULTATS DE LA MIGRATION:');
    console.log(`   ‚úÖ Succ√®s: ${results.success.length}`);
    console.log(`   ‚ùå Erreurs: ${results.errors.length}`);
    
    if (results.errors.length > 0) {
      console.log('\n‚ùå Erreurs d√©taill√©es:');
      results.errors.forEach(error => {
        console.log(`   - ${error.smartlink}: ${error.error}`);
      });
    }

    // Statistiques finales
    console.log('\n5. Statistiques finales...');
    const stats = await htmlGenerator.getStats();
    console.log('üìà Architecture HTML statique:');
    console.log(`   - Fichiers HTML: ${stats.totalFiles}`);
    console.log(`   - Artistes: ${stats.totalArtists}`);
    console.log(`   - Taille totale: ${Math.round(stats.totalSize / 1024)} KB`);
    console.log(`   - Derni√®re g√©n√©ration: ${stats.lastGenerated}`);

    // URLs de test
    console.log('\nüîó URLs de test g√©n√©r√©es:');
    results.success.slice(0, 3).forEach(filePath => {
      const pathParts = filePath.split('/');
      const fileName = pathParts[pathParts.length - 1].replace('.html', '');
      const artistSlug = pathParts[pathParts.length - 2];
      console.log(`   https://www.mdmcmusicads.com/smartlinks/${artistSlug}/${fileName}`);
    });

    console.log('\nüéØ ARCHITECTURE HTML STATIQUE ACTIV√âE AVEC SUCC√àS !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. Red√©marrer le serveur Express');
    console.log('   2. Tester les URLs SmartLinks sans hash (#)');
    console.log('   3. Valider avec Facebook Debugger');
    console.log('   4. Configurer redirections hash ‚Üí URLs directes');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'activation:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå D√©connect√© de MongoDB');
  }
}

// Formatage SmartLinkHTML (nouveau mod√®le)
function formatSmartLinkHTML(smartlink) {
  const platformLinks = [];
  
  const platformMapping = {
    spotifyUrl: 'spotify',
    appleUrl: 'apple', 
    youtubeUrl: 'youtube',
    deezerUrl: 'deezer',
    amazonUrl: 'amazon',
    tidalUrl: 'tidal',
    soundcloudUrl: 'soundcloud',
    bandcampUrl: 'bandcamp'
  };

  Object.entries(platformMapping).forEach(([urlField, platformKey]) => {
    if (smartlink[urlField]) {
      platformLinks.push({
        platform: platformKey,
        url: smartlink[urlField]
      });
    }
  });

  return {
    trackTitle: smartlink.title,
    slug: smartlink.trackSlug,
    description: smartlink.description || `√âcoutez "${smartlink.title}" de ${smartlink.artist} sur toutes les plateformes de streaming`,
    subtitle: smartlink.subtitle || '',
    coverImageUrl: smartlink.imageUrl,
    platformLinks: platformLinks,
    artist: {
      name: smartlink.artist,
      slug: smartlink.artistSlug
    }
  };
}

// Formatage SmartLink avec artistId popul√© (ancien mod√®le)
function formatSmartLinkPopulated(smartlink) {
  return {
    trackTitle: smartlink.trackTitle,
    slug: smartlink.slug,
    description: smartlink.description || `√âcoutez "${smartlink.trackTitle}" de ${smartlink.artistId.name} sur toutes les plateformes de streaming`,
    subtitle: smartlink.subtitle || '',
    coverImageUrl: smartlink.coverImageUrl,
    platformLinks: smartlink.platformLinks || [],
    artist: {
      name: smartlink.artistId.name,
      slug: smartlink.artistId.slug
    }
  };
}

// Lancement du script
if (require.main === module) {
  activateStaticHtmlArchitecture().catch(console.error);
}

module.exports = { activateStaticHtmlArchitecture };